/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PoviMartLib
{
  public partial class MarketService {
    public interface ISync {
      void SendMail(Customer customer, SendType sendtype);
      List<Product> GetProductList(int limit);
      ResultCode InsertProduct(string Name, string Email, long RegDate);
      ResultCode DeleteProduct(int Number);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_SendMail(AsyncCallback callback, object state, Customer customer, SendType sendtype);
      void End_SendMail(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetProductList(AsyncCallback callback, object state, int limit);
      List<Product> End_GetProductList(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_InsertProduct(AsyncCallback callback, object state, string Name, string Email, long RegDate);
      ResultCode End_InsertProduct(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteProduct(AsyncCallback callback, object state, int Number);
      ResultCode End_DeleteProduct(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_SendMail(AsyncCallback callback, object state, Customer customer, SendType sendtype)
      {
        return send_SendMail(callback, state, customer, sendtype);
      }

      public void End_SendMail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void SendMail(Customer customer, SendType sendtype)
      {
        #if !SILVERLIGHT
        send_SendMail(customer, sendtype);

        #else
        var asyncResult = Begin_SendMail(null, null, customer, sendtype);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SendMail(AsyncCallback callback, object state, Customer customer, SendType sendtype)
      #else
      public void send_SendMail(Customer customer, SendType sendtype)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SendMail", TMessageType.Oneway, seqid_));
        SendMail_args args = new SendMail_args();
        args.Customer = customer;
        args.Sendtype = sendtype;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetProductList(AsyncCallback callback, object state, int limit)
      {
        return send_GetProductList(callback, state, limit);
      }

      public List<Product> End_GetProductList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetProductList();
      }

      #endif

      public List<Product> GetProductList(int limit)
      {
        #if !SILVERLIGHT
        send_GetProductList(limit);
        return recv_GetProductList();

        #else
        var asyncResult = Begin_GetProductList(null, null, limit);
        return End_GetProductList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetProductList(AsyncCallback callback, object state, int limit)
      #else
      public void send_GetProductList(int limit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetProductList", TMessageType.Call, seqid_));
        GetProductList_args args = new GetProductList_args();
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Product> recv_GetProductList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetProductList_result result = new GetProductList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProductList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_InsertProduct(AsyncCallback callback, object state, string Name, string Email, long RegDate)
      {
        return send_InsertProduct(callback, state, Name, Email, RegDate);
      }

      public ResultCode End_InsertProduct(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_InsertProduct();
      }

      #endif

      public ResultCode InsertProduct(string Name, string Email, long RegDate)
      {
        #if !SILVERLIGHT
        send_InsertProduct(Name, Email, RegDate);
        return recv_InsertProduct();

        #else
        var asyncResult = Begin_InsertProduct(null, null, Name, Email, RegDate);
        return End_InsertProduct(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_InsertProduct(AsyncCallback callback, object state, string Name, string Email, long RegDate)
      #else
      public void send_InsertProduct(string Name, string Email, long RegDate)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("InsertProduct", TMessageType.Call, seqid_));
        InsertProduct_args args = new InsertProduct_args();
        args.Name = Name;
        args.Email = Email;
        args.RegDate = RegDate;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ResultCode recv_InsertProduct()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        InsertProduct_result result = new InsertProduct_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "InsertProduct failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteProduct(AsyncCallback callback, object state, int Number)
      {
        return send_DeleteProduct(callback, state, Number);
      }

      public ResultCode End_DeleteProduct(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteProduct();
      }

      #endif

      public ResultCode DeleteProduct(int Number)
      {
        #if !SILVERLIGHT
        send_DeleteProduct(Number);
        return recv_DeleteProduct();

        #else
        var asyncResult = Begin_DeleteProduct(null, null, Number);
        return End_DeleteProduct(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteProduct(AsyncCallback callback, object state, int Number)
      #else
      public void send_DeleteProduct(int Number)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteProduct", TMessageType.Call, seqid_));
        DeleteProduct_args args = new DeleteProduct_args();
        args.Number = Number;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ResultCode recv_DeleteProduct()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteProduct_result result = new DeleteProduct_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteProduct failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["SendMail"] = SendMail_Process;
        processMap_["GetProductList"] = GetProductList_Process;
        processMap_["InsertProduct"] = InsertProduct_Process;
        processMap_["DeleteProduct"] = DeleteProduct_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void SendMail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SendMail_args args = new SendMail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        try
        {
          iface_.SendMail(args.Customer, args.Sendtype);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
        }
      }

      public void GetProductList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetProductList_args args = new GetProductList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetProductList_result result = new GetProductList_result();
        try
        {
          result.Success = iface_.GetProductList(args.Limit);
          oprot.WriteMessageBegin(new TMessage("GetProductList", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetProductList", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void InsertProduct_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        InsertProduct_args args = new InsertProduct_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        InsertProduct_result result = new InsertProduct_result();
        try
        {
          result.Success = iface_.InsertProduct(args.Name, args.Email, args.RegDate);
          oprot.WriteMessageBegin(new TMessage("InsertProduct", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("InsertProduct", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteProduct_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteProduct_args args = new DeleteProduct_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteProduct_result result = new DeleteProduct_result();
        try
        {
          result.Success = iface_.DeleteProduct(args.Number);
          oprot.WriteMessageBegin(new TMessage("DeleteProduct", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DeleteProduct", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SendMail_args : TBase
    {
      private Customer _customer;
      private SendType _sendtype;

      public Customer Customer
      {
        get
        {
          return _customer;
        }
        set
        {
          __isset.customer = true;
          this._customer = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="SendType"/>
      /// </summary>
      public SendType Sendtype
      {
        get
        {
          return _sendtype;
        }
        set
        {
          __isset.sendtype = true;
          this._sendtype = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customer;
        public bool sendtype;
      }

      public SendMail_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Customer = new Customer();
                  Customer.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Sendtype = (SendType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SendMail_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Customer != null && __isset.customer) {
            field.Name = "customer";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Customer.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.sendtype) {
            field.Name = "sendtype";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Sendtype);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SendMail_args(");
        bool __first = true;
        if (Customer != null && __isset.customer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Customer: ");
          __sb.Append(Customer== null ? "<null>" : Customer.ToString());
        }
        if (__isset.sendtype) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sendtype: ");
          __sb.Append(Sendtype);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetProductList_args : TBase
    {
      private int _limit;

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool limit;
      }

      public GetProductList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetProductList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetProductList_args(");
        bool __first = true;
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetProductList_result : TBase
    {
      private List<Product> _success;

      public List<Product> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetProductList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Product>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      Product _elem2;
                      _elem2 = new Product();
                      _elem2.Read(iprot);
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetProductList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Product _iter3 in Success)
                {
                  _iter3.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetProductList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InsertProduct_args : TBase
    {
      private string _Name;
      private string _Email;
      private long _RegDate;

      public string Name
      {
        get
        {
          return _Name;
        }
        set
        {
          __isset.Name = true;
          this._Name = value;
        }
      }

      public string Email
      {
        get
        {
          return _Email;
        }
        set
        {
          __isset.Email = true;
          this._Email = value;
        }
      }

      public long RegDate
      {
        get
        {
          return _RegDate;
        }
        set
        {
          __isset.RegDate = true;
          this._RegDate = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool Name;
        public bool Email;
        public bool RegDate;
      }

      public InsertProduct_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  RegDate = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InsertProduct_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null && __isset.Name) {
            field.Name = "Name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (Email != null && __isset.Email) {
            field.Name = "Email";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          if (__isset.RegDate) {
            field.Name = "RegDate";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(RegDate);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InsertProduct_args(");
        bool __first = true;
        if (Name != null && __isset.Name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (Email != null && __isset.Email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (__isset.RegDate) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RegDate: ");
          __sb.Append(RegDate);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InsertProduct_result : TBase
    {
      private ResultCode _success;

      public ResultCode Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public InsertProduct_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ResultCode();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InsertProduct_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InsertProduct_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteProduct_args : TBase
    {
      private int _Number;

      public int Number
      {
        get
        {
          return _Number;
        }
        set
        {
          __isset.Number = true;
          this._Number = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool Number;
      }

      public DeleteProduct_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Number = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteProduct_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.Number) {
            field.Name = "Number";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Number);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteProduct_args(");
        bool __first = true;
        if (__isset.Number) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Number: ");
          __sb.Append(Number);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteProduct_result : TBase
    {
      private ResultCode _success;

      public ResultCode Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteProduct_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ResultCode();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteProduct_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteProduct_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
